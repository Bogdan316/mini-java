/* MiniJavaParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJavaParser.java */
    package org.example;
    import java.util.*;
    import javax.swing.tree.DefaultMutableTreeNode;import java.util.ArrayList;
    public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants, MiniJavaParserConstants {/*@bgen(jjtree)*/
  protected static JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();public static void constructJTree(DefaultMutableTreeNode parent, Node crtNode) {
            for(int i = 0; i < crtNode.jjtGetNumChildren(); i++) {
                Node child = crtNode.jjtGetChild(i);
                DefaultMutableTreeNode jNode = new DefaultMutableTreeNode(child.toString());
                parent.add(jNode);
                constructJTree(jNode, child);
            }
        }
        public static void main(String[] args) throws ParseException {
            MiniJavaParser parser = new MiniJavaParser(System.in);
            ASTProgram p = parser.Program();
            DefaultMutableTreeNode tree = new DefaultMutableTreeNode("Program");
            constructJTree(tree, p);
            DomainAnalysisVisitor visitor = new DomainAnalysisVisitor();
            p.jjtAccept(visitor, null);
            for(var cls : visitor.classTable) {
                System.out.println(cls);
            }
            System.out.println();
            for(var t : visitor.typeTable) {
                System.out.println(t);
            }
//            MiniJavaParserVisitor v = new MiniJavaPrinterVisitor();
//            p.jjtAccept(v, null);
//            javax.swing.SwingUtilities.invokeLater(new Runnable() {
//                        public void run() {
//                            JTree j = new JTree(tree);
//                            JFrame f = new JFrame();
//                            f.add(j);
//                            f.setSize(200, 200);
//                            f.setVisible(true);
//                            System.out.println("here");
//                        }
//                    });
        }

  static final public ASTProgram Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDecl();
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public void MainClass() throws ParseException {/*@bgen(jjtree) MainClass */
    ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));List fields = new ArrayList();
    try {
      jj_consume_token(CLASS);
      jj_consume_token(ID);
jjtn000.setName(token.image);
      jj_consume_token(29);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(30);
      jj_consume_token(STRING);
      jj_consume_token(31);
      jj_consume_token(32);
      jj_consume_token(ID);
      jj_consume_token(33);
      jj_consume_token(29);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        VarDecl(fields);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case IF:
        case WHILE:
        case SOUT:
        case INTEGER:
        case ID:
        case 29:
        case 30:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_3;
        }
        Statement();
      }
      jj_consume_token(34);
      jj_consume_token(34);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
for(var f : fields) {
        jjtn000.addField((ASTVarDecl) f);
    }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void ClassDecl() throws ParseException {/*@bgen(jjtree) ClassDecl */
    ASTClassDecl jjtn000 = new ASTClassDecl(JJTCLASSDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));List fields = new ArrayList();
    List methods = new ArrayList();
    try {
      jj_consume_token(CLASS);
      jj_consume_token(ID);
jjtn000.setName(token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        jj_consume_token(29);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case INT_ARR:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_4;
          }
          VarDecl(fields);
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_5;
          }
          MethodDecl(methods);
        }
        jj_consume_token(34);
        break;
        }
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        jj_consume_token(ID);
jjtn000.setParent(token.image);
        jj_consume_token(29);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case INT_ARR:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_6;
          }
          VarDecl(fields);
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_7;
          }
          MethodDecl(methods);
        }
        jj_consume_token(34);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
for(var f : fields) {
            jjtn000.addField((ASTVarDecl) f);
        }
        for(var m : methods) {
            jjtn000.addMethod((ASTMethodDecl) m);
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void VarDecl(List<ASTVarDecl> decls) throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Type();
      jj_consume_token(ID);
jjtn000.setName(token.image);
      jj_consume_token(35);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setTypeNode((ASTType) jjtn000.jjtGetChild(0));
        decls.add(jjtn000);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
}

  static final public void MethodDecl(List methods) throws ParseException {/*@bgen(jjtree) MethodDecl */
    ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));List locals = new ArrayList();
    List paramsTypes = new ArrayList();
    List paramNames = new ArrayList();
    ASTType returnType = null;
    try {
      jj_consume_token(PUBLIC);
      returnType = Type();
jjtn000.setReturnType(returnType);
      jj_consume_token(ID);
jjtn000.setName(token.image);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case BOOLEAN:
      case INT_ARR:
      case ID:{
        FormalList(paramsTypes, paramNames);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(33);
      jj_consume_token(29);
      label_8:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_8;
        }
        VarDecl(locals);
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case IF:
        case WHILE:
        case SOUT:
        case INTEGER:
        case ID:
        case 29:
        case 30:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(35);
      jj_consume_token(34);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
for(var paramType : paramsTypes) {
       jjtn000.addParamType(((ASTType) paramType).name);
   }
   for(var local : locals) {
       jjtn000.addLocal((ASTVarDecl) local);
   }
   for(var paramName: paramNames) {
       jjtn000.addParamName((String) paramName);
   }
   methods.add(jjtn000);
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
}

  static final public void FormalList(List types, List params) throws ParseException {ASTType type;
    type = Type();
types.add(type);
    jj_consume_token(ID);
params.add(token.image);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 36:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_10;
      }
      FormalRest(types);
    }
}

  static final public void FormalRest(List types) throws ParseException {ASTType type;
    jj_consume_token(36);
    type = Type();
types.add(type);
    jj_consume_token(ID);
}

  static final public ASTType Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case INT_ARR:{
        jj_consume_token(INT_ARR);
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtn000.setName(token.image);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case IF:
        case WHILE:
        case SOUT:
        case INTEGER:
        case ID:
        case 29:
        case 30:
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_11;
        }
        Statement();
      }
      jj_consume_token(34);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(30);
      Exp();
      jj_consume_token(33);
      Statement();
      if (jj_2_3(2)) {
        jj_consume_token(ELSE);
        Statement();
      } else {
        ;
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(30);
      Exp();
      jj_consume_token(33);
      Statement();
      break;
      }
    case SOUT:{
      jj_consume_token(SOUT);
      jj_consume_token(30);
      Exp();
      jj_consume_token(33);
      jj_consume_token(35);
      break;
      }
    case NEW:
    case TRUE:
    case FALSE:
    case THIS:
    case INTEGER:
    case ID:
    case 30:
    case 40:{
      if (jj_2_4(2)) {
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 37:{
          jj_consume_token(37);
          Exp();
          jj_consume_token(35);
          break;
          }
        case 31:{
          jj_consume_token(31);
          Exp();
          jj_consume_token(32);
          jj_consume_token(37);
          Exp();
          jj_consume_token(35);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case INTEGER:
        case ID:
        case 30:
        case 40:{
          Exp();
          jj_consume_token(35);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Exp() throws ParseException {
    Condition();
}

  static final public void Condition() throws ParseException {
    LogExp();
}

  static final public void ExpList() throws ParseException {
    LogExp();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 36:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_12;
      }
      ExpRest();
    }
}

  static final public void ExpRest() throws ParseException {
    jj_consume_token(36);
    LogExp();
}

  static final public void LogExp() throws ParseException {
    LogExpTerm();
    label_13:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(38);
      LogExpTerm();
    }
}

  static final public void LogExpTerm() throws ParseException {
    LogExpFactor();
    label_14:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_14;
      }
      jj_consume_token(39);
      LogExpFactor();
    }
}

  static final public void LogExpFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 40:{
      jj_consume_token(40);
      LogExp();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_7(3)) {
        jj_consume_token(30);
        LogExp();
        jj_consume_token(33);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case THIS:
        case INTEGER:
        case ID:
        case 30:{
          RelExp();
          break;
          }
        case TRUE:{
          jj_consume_token(TRUE);
          break;
          }
        case FALSE:{
          jj_consume_token(FALSE);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void RelExp() throws ParseException {
    ArExp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:{
      RelOp();
      ArExp();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
}

  static final public void RelOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 41:{
      jj_consume_token(41);
      break;
      }
    case 42:{
      jj_consume_token(42);
      break;
      }
    case 43:{
      jj_consume_token(43);
      break;
      }
    case 44:{
      jj_consume_token(44);
      break;
      }
    case 45:{
      jj_consume_token(45);
      break;
      }
    case 46:{
      jj_consume_token(46);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void ArExp() throws ParseException {
    Term();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:
      case 48:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_15;
      }
      AddOp();
      Term();
    }
}

  static final public void AddOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 47:{
      jj_consume_token(47);
      break;
      }
    case 48:{
      jj_consume_token(48);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Term() throws ParseException {
    Factor();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:
      case 50:
      case 51:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_16;
      }
      MulOp();
      Factor();
    }
}

  static final public void MulOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:{
      jj_consume_token(49);
      break;
      }
    case 50:{
      jj_consume_token(50);
      break;
      }
    case 51:{
      jj_consume_token(51);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 30:{
      jj_consume_token(30);
      ArExp();
      jj_consume_token(33);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      if (jj_2_8(2)) {
        jj_consume_token(30);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case TRUE:
        case FALSE:
        case THIS:
        case INTEGER:
        case ID:
        case 30:
        case 40:{
          ExpList();
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        jj_consume_token(33);
      } else {
        ;
      }
      break;
      }
    case INTEGER:{
      jj_consume_token(INTEGER);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        jj_consume_token(ID);
        jj_consume_token(30);
        jj_consume_token(33);
        break;
        }
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(31);
        ArExp();
        jj_consume_token(32);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_245_5_18()) return true;
    return false;
  }

  static private boolean jj_3R_ExpList_279_5_33()
 {
    if (jj_3R_LogExp_291_5_23()) return true;
    return false;
  }

  static private boolean jj_3R_Factor_349_29_51()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_Factor_347_31_24()
 {
    if (jj_3R_ExpList_279_5_33()) return true;
    return false;
  }

  static private boolean jj_3R_Condition_273_5_38()
 {
    if (jj_3R_LogExp_291_5_23()) return true;
    return false;
  }

  static private boolean jj_3R_VarDecl_175_5_17()
 {
    if (jj_3R_Type_238_4_25()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_Exp_267_5_36()
 {
    if (jj_3R_Condition_273_5_38()) return true;
    return false;
  }

  static private boolean jj_3R_Statement_257_13_20()
 {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_Statement_260_9_34()
 {
    if (jj_3R_Exp_267_5_36()) return true;
    return false;
  }

  static private boolean jj_3R_Factor_349_14_50()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_Statement_255_13_19()
 {
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(30)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Factor_347_31_24()) jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_255_13_19()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_257_13_20()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Factor_349_7_44()
 {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Factor_349_14_50()) {
    jj_scanpos = xsp;
    if (jj_3R_Factor_349_29_51()) return true;
    }
    return false;
  }

  static private boolean jj_3R_LogExpFactor_303_52_32()
 {
    if (jj_3R_RelExp_310_5_35()) return true;
    return false;
  }

  static private boolean jj_3R_Factor_347_7_43()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Statement_253_5_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_260_9_34()) return true;
    }
    return false;
  }

  static private boolean jj_3R_Factor_346_5_42()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_ArExp_322_5_37()) return true;
    return false;
  }

  static private boolean jj_3R_Statement_251_5_29()
 {
    if (jj_scan_token(SOUT)) return true;
    return false;
  }

  static private boolean jj_3R_Factor_346_5_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Factor_346_5_42()) {
    jj_scanpos = xsp;
    if (jj_3R_Factor_347_7_43()) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_Factor_349_7_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Term_334_15_47()
 {
    if (jj_3R_MulOp_340_5_49()) return true;
    return false;
  }

  static private boolean jj_3R_Statement_249_5_28()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_Statement_247_5_27()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_MulOp_340_5_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_Statement_245_5_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_245_5_26()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_247_5_27()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_249_5_28()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_251_5_29()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_253_5_30()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Statement_245_5_26()
 {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3R_Term_334_5_39()
 {
    if (jj_3R_Factor_346_5_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Term_334_15_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Type_238_4_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_ArExp_322_13_45()
 {
    if (jj_3R_AddOp_328_5_48()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_VarDecl_175_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_AddOp_328_5_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  static private boolean jj_3R_ArExp_322_5_37()
 {
    if (jj_3R_Term_334_5_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArExp_322_13_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_RelExp_310_14_41()
 {
    if (jj_3R_RelOp_316_5_46()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_LogExp_291_5_23()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_RelOp_316_5_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_scan_token(39)) return true;
    if (jj_3R_LogExpFactor_303_5_22()) return true;
    return false;
  }

  static private boolean jj_3R_RelExp_310_5_35()
 {
    if (jj_3R_ArExp_322_5_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RelExp_310_14_41()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(38)) return true;
    if (jj_3R_LogExpTerm_297_5_21()) return true;
    return false;
  }

  static private boolean jj_3R_LogExpFactor_303_5_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LogExpFactor_303_5_31()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_LogExpFactor_303_52_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_LogExpFactor_303_5_31()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_LogExp_291_5_23()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_VarDecl_175_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_LogExpTerm_297_5_21()
 {
    if (jj_3R_LogExpFactor_303_5_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_LogExp_291_5_23()
 {
    if (jj_3R_LogExpTerm_297_5_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x607a7010,0x4000e0,0x200,0x4000e0,0x200,0x20000800,0x4000e0,0x607a7010,0x0,0x4000e0,0x607a7010,0x80000000,0x40607010,0x607a7010,0x0,0x0,0x40607010,0x0,0x0,0x0,0x0,0x0,0x0,0x40607010,0x400020,0x40604010,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x10,0x0,0x100,0x20,0x100,0x100,0x10,0x100,0x0,0x7e00,0x7e00,0x18000,0x18000,0xe0000,0xe0000,0x100,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 27; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[52];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 27; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 52; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 8; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

    }
