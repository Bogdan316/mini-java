/* MiniJavaParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. MiniJavaParser.java */
    package org.example;
    import javax.swing.*;
    public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants, MiniJavaParserConstants {/*@bgen(jjtree)*/
  protected static JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();public static void main(String[] args) throws ParseException {
            MiniJavaParser parser = new MiniJavaParser(System.in);
            ASTProgram p = parser.Program();
            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            JTree j = new JTree(p.jTree);
                            JFrame f = new JFrame();
                            f.add(j);
                            f.setSize(200, 200);
                            f.setVisible(true);
                            System.out.println("here");
                        }
                    });
//            p.dump("");
//            System.out.println("here here");
        }

  static final public ASTProgram Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ClassDecl();
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public void MainClass() throws ParseException {/*@bgen(jjtree) MainClass */
  ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      jj_consume_token(ID);
      jj_consume_token(29);
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(30);
      jj_consume_token(STRING);
      jj_consume_token(31);
      jj_consume_token(32);
      jj_consume_token(ID);
      jj_consume_token(33);
      jj_consume_token(29);
      label_2:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_2;
        }
        VarDecl();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case SOUT:
        case ID:
        case 29:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_3;
        }
        Statement();
      }
      jj_consume_token(34);
      jj_consume_token(34);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ClassDecl() throws ParseException {/*@bgen(jjtree) ClassDecl */
  ASTClassDecl jjtn000 = new ASTClassDecl(JJTCLASSDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        jj_consume_token(29);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_4;
          }
          VarDecl();
        }
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_5;
          }
          MethodDecl();
        }
        jj_consume_token(34);
        break;
        }
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        jj_consume_token(ID);
        jj_consume_token(29);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INT:
          case BOOLEAN:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            break label_6;
          }
          VarDecl();
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_7;
          }
          MethodDecl();
        }
        jj_consume_token(34);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void VarDecl() throws ParseException {/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(ID);
      jj_consume_token(35);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MethodDecl() throws ParseException {/*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      jj_consume_token(ID);
      jj_consume_token(30);
      FormalList();
      jj_consume_token(33);
      jj_consume_token(29);
      VarDecl();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case SOUT:
        case ID:
        case 29:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Exp();
      jj_consume_token(35);
      jj_consume_token(34);
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
}

  static final public void FormalList() throws ParseException {/*@bgen(jjtree) FormalList */
  ASTFormalList jjtn000 = new ASTFormalList(JJTFORMALLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(ID);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 36:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_9;
        }
        FormalRest();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void FormalRest() throws ParseException {/*@bgen(jjtree) FormalRest */
  ASTFormalRest jjtn000 = new ASTFormalRest(JJTFORMALREST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(36);
      Type();
      jj_consume_token(ID);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 31:{
          jj_consume_token(31);
          jj_consume_token(32);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        break;
        }
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
}

  static final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        jj_consume_token(29);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case SOUT:
          case ID:
          case 29:{
            ;
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            break label_10;
          }
          Statement();
        }
        jj_consume_token(34);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(30);
        Exp();
        jj_consume_token(33);
        Statement();
        if (jj_2_2(2)) {
          jj_consume_token(ELSE);
          Statement();
        } else {
          ;
        }
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        jj_consume_token(30);
        Exp();
        jj_consume_token(33);
        Statement();
        break;
        }
      case SOUT:{
        jj_consume_token(SOUT);
        jj_consume_token(30);
        Exp();
        jj_consume_token(33);
        jj_consume_token(35);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 37:{
          jj_consume_token(37);
          Exp();
          jj_consume_token(35);
          break;
          }
        case 31:{
          jj_consume_token(31);
          Exp();
          jj_consume_token(32);
          jj_consume_token(37);
          Exp();
          jj_consume_token(35);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Exp() throws ParseException {/*@bgen(jjtree) Exp */
  ASTExp jjtn000 = new ASTExp(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Condition();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Condition() throws ParseException {/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogExp();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void LogExp() throws ParseException {/*@bgen(jjtree) LogExp */
  ASTLogExp jjtn000 = new ASTLogExp(JJTLOGEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogExpTerm();
      label_11:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(38);
        LogExpTerm();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void LogExpTerm() throws ParseException {/*@bgen(jjtree) LogExpTerm */
  ASTLogExpTerm jjtn000 = new ASTLogExpTerm(JJTLOGEXPTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogExpFactor();
      label_12:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(39);
        LogExpFactor();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void LogExpFactor() throws ParseException {/*@bgen(jjtree) LogExpFactor */
  ASTLogExpFactor jjtn000 = new ASTLogExpFactor(JJTLOGEXPFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 40:{
        jj_consume_token(40);
        LogExp();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        if (jj_2_5(3)) {
          jj_consume_token(30);
          LogExp();
          jj_consume_token(33);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER:
          case ID:
          case 30:{
            RelExp();
            break;
            }
          case TRUE:{
            jj_consume_token(TRUE);
            break;
            }
          case FALSE:{
            jj_consume_token(FALSE);
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void RelExp() throws ParseException {/*@bgen(jjtree) RelExp */
  ASTRelExp jjtn000 = new ASTRelExp(JJTRELEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ArExp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:{
        RelOp();
        ArExp();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void RelOp() throws ParseException {/*@bgen(jjtree) RelOp */
  ASTRelOp jjtn000 = new ASTRelOp(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 41:{
        jj_consume_token(41);
        break;
        }
      case 42:{
        jj_consume_token(42);
        break;
        }
      case 43:{
        jj_consume_token(43);
        break;
        }
      case 44:{
        jj_consume_token(44);
        break;
        }
      case 45:{
        jj_consume_token(45);
        break;
        }
      case 46:{
        jj_consume_token(46);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void ArExp() throws ParseException {/*@bgen(jjtree) ArExp */
  ASTArExp jjtn000 = new ASTArExp(JJTAREXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Term();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 47:
        case 48:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_13;
        }
        AddOp();
        Term();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void AddOp() throws ParseException {/*@bgen(jjtree) AddOp */
  ASTAddOp jjtn000 = new ASTAddOp(JJTADDOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        break;
        }
      case 48:{
        jj_consume_token(48);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Term() throws ParseException {/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Factor();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 49:
        case 50:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_14;
        }
        MulOp();
        Factor();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void MulOp() throws ParseException {/*@bgen(jjtree) MulOp */
  ASTMulOp jjtn000 = new ASTMulOp(JJTMULOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        break;
        }
      case 50:{
        jj_consume_token(50);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static final public void Factor() throws ParseException {/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        jj_consume_token(30);
        ArExp();
        jj_consume_token(33);
        break;
        }
      case ID:{
        jj_consume_token(ID);
        break;
        }
      case INTEGER:{
        jj_consume_token(INTEGER);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_148_5_16()) return true;
    return false;
  }

  static private boolean jj_3R_MulOp_227_5_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  static private boolean jj_3R_LogExp_178_5_19()
 {
    if (jj_3R_LogExpTerm_184_5_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_Term_221_5_32()
 {
    if (jj_3R_Factor_233_5_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Term_221_15_38()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_ArExp_209_13_36()
 {
    if (jj_3R_AddOp_215_5_39()) return true;
    return false;
  }

  static private boolean jj_3R_AddOp_215_5_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  static private boolean jj_3R_VarDecl_118_5_15()
 {
    if (jj_3R_Type_142_4_20()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_ArExp_209_5_31()
 {
    if (jj_3R_Term_221_5_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArExp_209_13_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_RelExp_197_14_34()
 {
    if (jj_3R_RelOp_203_5_37()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_LogExp_178_5_19()) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_RelOp_203_5_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Statement_156_5_25()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_Statement_154_5_24()
 {
    if (jj_scan_token(SOUT)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(39)) return true;
    if (jj_3R_LogExpFactor_190_5_18()) return true;
    return false;
  }

  static private boolean jj_3R_Statement_152_5_23()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_RelExp_197_5_29()
 {
    if (jj_3R_ArExp_209_5_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_RelExp_197_14_34()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Statement_150_5_22()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_Type_142_11_30()
 {
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_Statement_148_5_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_148_5_21()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_150_5_22()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_152_5_23()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_154_5_24()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_156_5_25()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Statement_148_5_21()
 {
    if (jj_scan_token(29)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(38)) return true;
    if (jj_3R_LogExpTerm_184_5_17()) return true;
    return false;
  }

  static private boolean jj_3R_LogExpFactor_190_52_27()
 {
    if (jj_3R_RelExp_197_5_29()) return true;
    return false;
  }

  static private boolean jj_3R_LogExpFactor_190_5_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LogExpFactor_190_5_26()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_LogExpFactor_190_52_27()) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_LogExpFactor_190_5_26()
 {
    if (jj_scan_token(40)) return true;
    if (jj_3R_LogExp_178_5_19()) return true;
    return false;
  }

  static private boolean jj_3R_Type_142_4_28()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_142_11_30()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_Type_142_4_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_142_4_28()) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_VarDecl_118_5_15()) return true;
    return false;
  }

  static private boolean jj_3R_Factor_233_5_35()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_ArExp_209_5_31()) return true;
    return false;
  }

  static private boolean jj_3R_Factor_233_5_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Factor_233_5_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_Term_221_15_38()
 {
    if (jj_3R_MulOp_227_5_40()) return true;
    return false;
  }

  static private boolean jj_3R_LogExpTerm_184_5_17()
 {
    if (jj_3R_LogExpFactor_190_5_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x400,0x205a0000,0x400060,0x200,0x400060,0x200,0x20000800,0x205a0000,0x0,0x80000000,0x400060,0x205a0000,0x80000000,0x205a0000,0x0,0x40603000,0x0,0x0,0x0,0x0,0x0,0x0,0x40600000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x20,0x0,0x100,0x0,0x7e00,0x7e00,0x18000,0x18000,0x60000,0x60000,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJavaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJavaParser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJavaParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJavaParser(MiniJavaParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 23; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 23; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

    }
