/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MiniJavaParser.jj */
/*@egen*/options {
//    DEBUG_PARSER = true;
    OUTPUT_DIRECTORY = "/home/bogdan/git/MiniJava/src/main/java/org/example";
                 
                   
                                 
                        
                             
}

PARSER_BEGIN(MiniJavaParser)
    package org.example;
    import java.util.*;
    import javax.swing.tree.DefaultMutableTreeNode;import java.util.ArrayList;
    public class MiniJavaParser/*@bgen(jjtree)*/implements MiniJavaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTMiniJavaParserState jjtree = new JJTMiniJavaParserState();

/*@egen*/
        public static void constructJTree(DefaultMutableTreeNode parent, Node crtNode) {
            for(int i = 0; i < crtNode.jjtGetNumChildren(); i++) {
                Node child = crtNode.jjtGetChild(i);
                DefaultMutableTreeNode jNode = new DefaultMutableTreeNode(child.toString());
                parent.add(jNode);
                constructJTree(jNode, child);
            }
        }
        public static void main(String[] args) throws ParseException {
            MiniJavaParser parser = new MiniJavaParser(System.in);
            ASTProgram p = parser.Program();
            DefaultMutableTreeNode tree = new DefaultMutableTreeNode("Program");
            constructJTree(tree, p);
            DomainAnalysisVisitor visitor = new DomainAnalysisVisitor();
            p.jjtAccept(visitor, null);
            for(var cls : visitor.classTable) {
                System.out.println(cls);
            }
            System.out.println();
            for(var t : visitor.typeTable) {
                System.out.println(t);
            }
//            MiniJavaParserVisitor v = new MiniJavaPrinterVisitor();
//            p.jjtAccept(v, null);
//            javax.swing.SwingUtilities.invokeLater(new Runnable() {
//                        public void run() {
//                            JTree j = new JTree(tree);
//                            JFrame f = new JFrame();
//                            f.add(j);
//                            f.setSize(200, 200);
//                            f.setVisible(true);
//                            System.out.println("here");
//                        }
//                    });
        }
    }
PARSER_END(MiniJavaParser)

TOKEN : {
    <MAIN: "main">
    |
    <LENGTH: "length">
    |
    <STRING: "String">
    |
    <NEW: "new">
    |
    <INT: "int">
    |
    <BOOLEAN: "boolean">
    |
    <INT_ARR: "int" "[" "]">
    |
    <VOID: "void">
    |
    <PUBLIC: "public">
    |
    <CLASS: "class">
    |
    <EXTENDS: "extends">
    |
    <TRUE: "true">
    |
    <FALSE: "false">
    |
    <THIS: "this">
    |
    <STATIC: "static">
    |
    <RETURN: "return">
    |
    <IF: "if">
    |
    <ELSE: "else">
    |
    <WHILE: "while">
    |
    <SOUT: "System.out.println">
    |
    <INTEGER: (["0"-"9"])+>
    |
    <ID: ["_", "$", "a"-"z", "A"-"Z"](["_", "$", "a"-"z", "A"-"Z", "0"-"9"])*>
}

<*> SKIP : {
    " "
    |
    "\t"
    |
    "\n"
    |
    "\r"
    |
    <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    |
    <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

ASTProgram Program()         :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    MainClass() (ClassDecl())* <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MainClass()           :
{/*@bgen(jjtree) MainClass */
    ASTMainClass jjtn000 = new ASTMainClass(JJTMAINCLASS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    List fields = new ArrayList();
}
{/*@bgen(jjtree) MainClass */
    try {
/*@egen*/
    <CLASS>
    <ID> { jjtn000.setName(token.image); }
    "{"
        <PUBLIC> <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" <ID> ")"
        "{"
            (LOOKAHEAD(2) VarDecl(fields))*
            (Statement())*
        "}"
    "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
    for(var f : fields) {
        jjtn000.addField((ASTVarDecl) f);
    }
}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ClassDecl()            :
{/*@bgen(jjtree) ClassDecl */
    ASTClassDecl jjtn000 = new ASTClassDecl(JJTCLASSDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    List fields = new ArrayList();
    List methods = new ArrayList();
}
{/*@bgen(jjtree) ClassDecl */
    try {
/*@egen*/
    <CLASS>
    <ID> { jjtn000.setName(token.image); }
    (
        "{"
            (VarDecl(fields))*
            (MethodDecl(methods))*
        "}"
        |
        <EXTENDS> <ID> { jjtn000.setParent(token.image); }
        "{"
            (VarDecl(fields))*
            (MethodDecl(methods))*
        "}"
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        for(var f : fields) {
            jjtn000.addField((ASTVarDecl) f);
        }
        for(var m : methods) {
            jjtn000.addMethod((ASTMethodDecl) m);
        }
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void VarDecl(List<ASTVarDecl> decls)         :
{/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) VarDecl */
    try {
/*@egen*/
    Type()
    <ID> { jjtn000.setName(token.image); }
    ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        jjtn000.setTypeNode((ASTType) jjtn000.jjtGetChild(0));
        decls.add(jjtn000);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void MethodDecl(List methods)            :
{/*@bgen(jjtree) MethodDecl */
    ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    List locals = new ArrayList();
    List paramsTypes = new ArrayList();
    List paramNames = new ArrayList();
    ASTType returnType = null;
}
{/*@bgen(jjtree) MethodDecl */
     try {
/*@egen*/
     <PUBLIC>
     returnType = Type() { jjtn000.setReturnType(returnType); }
     <ID> { jjtn000.setName(token.image); }
     "(" (FormalList(paramsTypes, paramNames))? ")"
     "{"
            (LOOKAHEAD(2) VarDecl(locals))*
            (Statement())*
            <RETURN> Exp() ";"
     "}"/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
     }
/*@egen*/
     {
   for(var paramType : paramsTypes) {
       jjtn000.addParamType(((ASTType) paramType).name);
   }
   for(var local : locals) {
       jjtn000.addLocal((ASTVarDecl) local);
   }
   for(var paramName: paramNames) {
       jjtn000.addParamName((String) paramName);
   }
   methods.add(jjtn000);
}/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/
}

void FormalList(List types, List params):
{
    ASTType type;
}
{
    type = Type() { types.add(type); }
    <ID> { params.add(token.image); }
    (FormalRest(types))*
}

void FormalRest(List types):
{
    ASTType type;
}
{
    ","
    type = Type() { types.add(type); }
    <ID>
}

ASTType Type()      :
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Type */
   try {
/*@egen*/
   (<INT> | <INT_ARR> | <BOOLEAN> | <ID>) { jjtn000.setName(token.image); }/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
   }
/*@egen*/
   { return jjtn000; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

void Statement():
{}
{
    "{" (Statement())* "}"
    |
    <IF> "(" Exp() ")" Statement() (LOOKAHEAD(2) <ELSE> Statement())?
    |
    <WHILE> "(" Exp() ")" Statement()
    |
    <SOUT> "(" Exp() ")" ";"
    |
    (
        LOOKAHEAD(2) <ID> (
            "=" Exp() ";"
            |
            "[" Exp() "]" "=" Exp() ";"
        )
        |
        Exp() ";"
    )
}

void Exp():
{}
{
    Condition()
}

void Condition():
{}
{
    LogExp()
}

void ExpList():
{}
{
    LogExp() (ExpRest())*
}

void ExpRest():
{}
{
    "," LogExp()
}

void LogExp():
{}
{
    LogExpTerm() (LOOKAHEAD(2) "||" LogExpTerm())*
}

void LogExpTerm():
{}
{
    LogExpFactor() (LOOKAHEAD(2) "&&" LogExpFactor())*
}

void LogExpFactor():
{}
{
    "!" LogExp() | LOOKAHEAD(3) "(" LogExp() ")" | RelExp() | <TRUE> | <FALSE>
}


void RelExp():
{}
{
    ArExp() (RelOp() ArExp())?
}

void RelOp():
{}
{
    "<" | ">" | "<=" | ">=" | "==" | "!="
}

void ArExp():
{}
{
    Term() (AddOp() Term())*
}

void AddOp():
{}
{
    "+" | "-"
}

void Term():
{}
{
    Factor() (MulOp() Factor())*
}

void MulOp():
{}
{
    "*" | "/" | "."
}

void Factor():
{}
{
    "(" ArExp() ")"
    | <ID> (LOOKAHEAD(2) "(" (ExpList())? ")")?
    | <INTEGER>
    | <NEW> (<ID> "(" ")" | <INT> "[" ArExp() "]")
    | <THIS>
}